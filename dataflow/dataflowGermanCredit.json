{
	"name": "dataflowGermanCredit",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "GermanCredit",
						"type": "DatasetReference"
					},
					"name": "GermanCredit"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "GERMAN_RISK",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitSexAndMaritalStatus"
				},
				{
					"name": "BinarizeRiskColumn"
				},
				{
					"name": "OrdinalEncodeSavingsColumn"
				},
				{
					"name": "OneHotEncodeColumns"
				},
				{
					"name": "SelectFinalColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          existingchecking as string,",
				"          duration as string,",
				"          creditamount as string,",
				"          savings as string,",
				"          employmentsince as string,",
				"          status_sex as string,",
				"          age as string,",
				"          housing as string,",
				"          existingcredits as string,",
				"          job as string,",
				"          dependents as string,",
				"          risk as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> GermanCredit",
				"GermanCredit derive(sex = iif(startsWith(status_sex, 'female'), 'female', 'male'),",
				"          marital_status = split(split(status_sex, ':')[2], '/')[size(split(split(status_sex, ':')[2], '/'))]) ~> SplitSexAndMaritalStatus",
				"SplitSexAndMaritalStatus derive(risk = iif(risk == 'high risk', 1, 0)) ~> BinarizeRiskColumn",
				"BinarizeRiskColumn derive(savings = case(",
				"    savings == 'unknown', 0,",
				"    savings == 'little', 1,",
				"    savings == 'moderate', 2,",
				"    savings == 'high', 3,",
				"    savings == 'very high', 4",
				")) ~> OrdinalEncodeSavingsColumn",
				"OrdinalEncodeSavingsColumn derive(housing_own = iif(housing == 'own', 1, 0),",
				"          housing_rent = iif(housing == 'rent', 1, 0),",
				"          housing_for_free = iif(housing == 'for free', 1, 0),",
				"          sex_male = iif(sex == 'male', 1, 0),",
				"          sex_female = iif(sex == 'female', 1, 0),",
				"          marital_status_married = iif(marital_status == 'married', 1, 0),",
				"          marital_status_separated = iif(marital_status == 'separated', 1, 0),",
				"          marital_status_single = iif(marital_status == 'single', 1, 0),",
				"          marital_status_widowed = iif(marital_status == 'widowed', 1, 0),",
				"          job_skilled = iif(job == 'skilled employee / official', 1, 0),",
				"          job_unskilled = iif(job == 'unskilled', 1, 0),",
				"          job_management = iif(job == 'management / highly skilled', 1, 0)) ~> OneHotEncodeColumns",
				"OneHotEncodeColumns select(mapColumn(",
				"          existingchecking,",
				"          duration,",
				"          creditamount,",
				"          savings,",
				"          employmentsince,",
				"          age,",
				"          existingcredits,",
				"          dependents,",
				"          risk,",
				"          housing_own,",
				"          housing_rent,",
				"          housing_for_free,",
				"          sex_male,",
				"          sex_female,",
				"          marital_status_married,",
				"          marital_status_separated,",
				"          marital_status_single,",
				"          marital_status_widowed,",
				"          job_skilled,",
				"          job_unskilled,",
				"          job_management",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
				"SelectFinalColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}